CRON Queries

// 1.  Events that will exprie between given date time range

SELECT *FROM `event` 
CROSS JOIN `user` ON event.instructor_id = user.user_id 
WHERE end_time >= '2020-06-22 00:00:00' AND end_time <= '2020-06-22 23:59:59'
AND event.isActive = 1;


// 2. Registrations that will expire b/w given date time range
SELECT  
	registration.registration_id,
	registration.user_id,
	registration.uuid AS registration_uuid,
	registration.final_amount,
	user.diaplay_name,
	user.mobile_number,
	user.email_id,
	user.uuid AS user_uuid
	FROM registration 
        CROSS JOIN `user` ON registration.user_id = user.user_id
        WHERE registration.expiry_date >= '2020-06-24 00:00:00' AND registration.expiry_date <= '2020-06-24 23:59:59'
        AND registration.isActive = 1
		

// 3. Total Payments got b/w given date range
SELECT  
	SUM(final_amount) AS total_amount
	FROM registration 
		WHERE registration.created_at >= '2020-06-23 00:00:00' AND registration.created_at <= '2020-06-23 23:59:59'
		

4. All Events that is about to expire in given date range, trainer must be active 
	SELECT 
        event.event_id, event.event_name, event.uuid AS Event_UUID, event.end_date, event.price, user.user_id AS trainer_id, user.diaplay_name AS trainer_name, user.email_id AS trainer_email, user.uuid AS trainer_UUID
        FROM EVENT 
        INNER JOIN USER ON event.instructor_id = user.user_id 
        WHERE end_time >= '2020-06-24 00:00:00' AND end_time <= '2020-06-24 23:59:59'
        AND event.isActive = 1 AND user.isActive = 1 AND user.user_role_id = 6 
		
		
5. Clients and Registration info
# Registration and Subscription info, with expiry in given date range


SELECT * FROM (
 SELECT * FROM (
 SELECT 
 	registration.registration_id, registration.user_id AS client_id, registration.subscription_id, registration.final_amount, registration.expiry_date,
 	subscription.event_id AS subscribed_eventId, subscription.amount, subscription.tax
 	FROM registration INNER JOIN subscription ON subscription.subscription_id = registration.subscription_id
 ) AS registrations
 
 INNER JOIN EVENT ON event.event_id = registrations.subscribed_eventId 
 ) AS registered_events
  INNER JOIN USER ON registered_events.client_id = user.user_id 
  
  WHERE registered_events.expiry_date >= '2020-06-24 00:00:00' AND registered_events.expiry_date <= '2020-06-24 23:59:59'
        AND registered_events.isActive = 1 AND user.isActive = 1 AND user.user_role_id = 3


6. Updating Available Seats after the event Subscription expires.
######
UPDATE batches
    INNER JOIN registration ON batches.subscription_id = registration.subscription_id 
    INNER JOIN registration_batches ON  registration_batches.registration_id = registration.registration_id
    SET batches.available_seats = batches.available_seats+1
    WHERE registration.expiry_date >= '2020-06-24 00:00:00' AND registration.expiry_date <= '2020-06-24 23:59:59';


7. Updating isActive=0 on Event Batch Expiry of Event Subscription.
######
UPDATE registration_batches
    INNER JOIN registration ON  registration_batches.registration_id = registration.registration_id
    SET registration_batches.isActive = 0
    WHERE registration.expiry_date >= '2020-06-24 00:00:00' AND registration.expiry_date <= '2020-06-24 23:59:59'


8. Updating isActive = 0 on Event Subscription.
######
UPDATE registration
    SET registration.isActive = 0
    WHERE registration.expiry_date >= '2020-06-24 00:00:00' AND registration.expiry_date <= '2020-06-24 23:59:59'



9. To get the Trainer's batches b/w given date time
######
SELECT
e.event_name, e.instructor_id, e.event_id, e.end_date, # event
b.event_id, b.batches_id, b.start_time, b.end_time, b.available_seats, b.frequency_config # batches

FROM `event` e
INNER JOIN `batches` b ON e.event_id = b.event_id
# from `event`, `batches` as b

WHERE
#e.event_id = b.event_id AND
e.isActive = 1 AND
b.isActive = 1 AND
e.instructor_id = 103 AND # Accept from outside
b.start_time >= '00:00' AND b.end_time <= '23:59' AND # Accept from out side
b.frequency_config LIKE '%Mon%' # Accept from outside

ORDER BY b.start_time



10. To get Users Batches b/w given time# To get the batches for a given trainer, b/w given date and time
######

SELECT

e.event_name, # event
r.expiry_date, r.registration_id, #registration
rb.batch_id, rb.day_of_week, # registration_batches
b.event_id, b.batches_id, b.start_time, b.end_time # batches

FROM `event` e, `registration` r, `registration_batches` rb, `batches` b

WHERE 
e.isActive = 1 AND
b.isActive = 1 AND

e.event_id = r.event_id AND
r.event_id = b.event_id AND
r.registration_id = rb.registration_id AND
#r.expiry_date >= '2020-07-12 01:36:00' AND # Accept from out side | Current Time
r.user_id= 627 AND # Accept from outside
b.start_time >= '00:00' AND b.end_time <= '23:59' AND # Accept from out side
rb.day_of_week LIKE '%Monday%' # Accept from outside

ORDER BY  b.start_time

